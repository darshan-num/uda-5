# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    working_directory: ~/repo

    steps:
      - checkout

    # # Download and cache dependencies
    #   - restore_cache:
    #       keys:
    #         - v1-dependencies-{{ checksum "requirements.txt" }}
    #         # fallback to using the latest cache if no exact match is found
    #         - v1-dependencies-

    #   - run:
    #       name: install dependencies
    #       command: |
    #         python3 -m venv venv
    #         . venv/bin/activate
    #         make install
    #         wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
    #         chmod +x /bin/hadolint
    #   - save_cache:
    #       paths:
    #         - ./venv
    #       key: v1-dependencies-{{ checksum "requirements.txt" }}

    # # run lint!
    #   - run:
    #       name: run lint
    #       command: |
    #         . venv/bin/activate
    #         make lint 
    # Install other dependencies
    # curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" 
    # unzip awscliv2.zip
    # sudo ./aws/install
      - run:
          name: Install cli 2, docker & eksctl
          command: |
            sudo apt install apt-transport-https ca-certificates curl software-properties-common
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable"
            sudo apt install docker-ce
            sudo systemctl status docker

            chmod +x install_dependencies.sh
            ./install_dependencies.sh
    # Build Docker image
      - run:
          name: Build and deploy docker image
          command: |
            chmod +x build_and_push_docker.sh
            docker login --username $DOCKERUSERNAME --password $DOCKERPASS
            ./build_and_push_docker.sh

    # Create EKS cluster
      - run:
          name: Create EKS cluster
          command: |
            ./create_cluster.sh

    # Deploy docker image to EKS cluster
      - run:
          name: Deploy EKS image
          command: |
            ./run_kubernetes.sh

    # Cleanup
      - run:
          name: Cleanup
          command: |
            eksctl delete cluster prod