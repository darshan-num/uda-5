jobs:
  build-and-lint-files:
      docker:
        # Use the same Docker base as the project
        - image: python:3.7.3-stretch

      working_directory: ~/repo

      steps:
        - checkout

      # Download and cache dependencies
        - restore_cache:
            keys:
              - v1-dependencies-{{ checksum "requirements.txt" }}
              # fallback to using the latest cache if no exact match is found
              - v1-dependencies-

        - run:
            name: install dependencies
            command: |
              python3 -m venv venv
              . venv/bin/activate
              make install
              wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
              chmod +x /bin/hadolint

        - run:
            name: install additional dependencies
            command: |
              wget https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
              tar xf kubeval-linux-amd64.tar.gz
              cp kubeval /usr/local/bin

        - save_cache:
            paths:
              - ./venv
            key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run lint!
        - run:
            name: run lint
            command: |
              . venv/bin/activate
              make lint 

  build-and-push-docker:
      machine: true
      steps:
      - checkout
      - run:
          name: Build and push to dockerhub
          command: |
            docker login --username $DOCKERUSERNAME --password $DOCKERPASS
            chmod +x build_and_push_docker.sh
            ./build_and_push_docker.sh
  
  test-cluster:
    working_directory: ~/repo
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - run:
          command: |
            chmod +x install_cli.sh
            ./install_cli.sh
            aws configure set aws_access_key_id $AWS_ACCESS_KEY
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY

      - kubernetes/install

      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>

      - run:
          command: |
            kubectl get services
          name: Test cluster

  create-deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: eks-cluster.yml
          resource-name: deployment/dashapi

orbs:
  aws-eks: circleci/aws-eks@0.2.3
  kubernetes: circleci/kubernetes@0.4.0

version: 2.1
workflows:
  deployment:
    jobs:
      # - build-and-lint-files

      # - build-and-push-docker:
      #     requires:
      #       - build-and-lint-files

      # - aws-eks/create-cluster:
      #     cluster-name: prod2
          # requires:
          #   - build-and-push-docker

      - test-cluster:
          cluster-name: prod2
          # requires:
          #   - aws-eks/create-cluster

      - create-deployment:
          cluster-name: prod2
          requires:
            - test-cluster
            
      - aws-eks/update-container-image:
          cluster-name: prod2
          container-image-updates: 'nginx=nginx:1.9.1'
          post-steps:
            - kubernetes/delete-resource:
                resource-names: dashapi
                resource-types: deployment
                wait: true
          record: true
          requires:
            - create-deployment
          resource-name: deployment/dashapi

      - aws-eks/delete-cluster:
          cluster-name: prod2
          requires:
            - aws-eks/update-container-image